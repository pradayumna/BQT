model4 = lm(gradin6 ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff, data = x)
a = coeftest(model4, vcov = vcovCL, cluster = x$clustervar) #other attributes and clustervar removed
c(a[2,1], a[2, 4], a[2, 2], a[1, 1], a[1, 4], a[1, 2])
}
myvars = c('All Data', 'HSgrade above Median','HSgrade below Median','Male','Female','Eng 1st language', 'Eng not 1st language')
colnames = c('gpa below cutoff 1', 'p-value 1', 'sd-error 1', 'intercept 0', 'p value 0', 'sd-error 1')
answer = lapply(Data_sets, grad6_fn)
table5 = do.call(rbind.data.frame, answer)
colnames(table5) <- c('GPA below cutoff (1)', 'P-Value (1)', 'Std.err (1)','Intercept (0)', 'P-Value (0)', 'Std.err (0)')
rownames(table5) <- myvars
formattable(table5,
align =c("c","c","c","c","c", "c"),
list(`Indicator Name` = formatter(
"span", style = ~ style(color = "grey",font.weight = "bold")),
`P-Value (1)`= color_tile('pink', 'lightgreen')))
nextGPA_fn = function(x)
{
model5 = lm(nextGPA ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff, data = x)
a = coeftest(model5, vcov = vcovCL, cluster = x$clustervar) #other attributes and clustervar removed
c(a[2,1], a[2, 4], a[2, 2], a[1, 1], a[1, 4], a[1, 2])
}
answer = lapply(Data_sets, nextGPA_fn)
table6 = do.call(rbind.data.frame, answer)
colnames(table6) <- c('GPA below cutoff (1)', 'P-Value (1)', 'Std.err (1)','Intercept (0)', 'P-Value (0)', 'Std.err (0)')
rownames(table6) <- myvars
formattable(table6,
align =c("c","c","c","c","c", "c"),
list(`Indicator Name` = formatter(
"span", style = ~ style(color = "grey",font.weight = "bold")),
`P-Value (1)`= color_tile('pink', 'lightgreen')))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
install.packages(here)
install.packages('here')
install.packages('stargazer')
install.packages('kableExtra')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
library(stargazer)
library(kableExtra)
library(finalfit)
install.packages(c('finalfit', 'broom', 'rdpower', 'modelsummary', 'ggpubr'))
install.packages(c('finalfit'))
install.packages(c("finalfit"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
library(stargazer)
library(kableExtra)
library(finalfit)
library(broom)
#install.packages("rdpower")
library(rdpower)
install.packages('rdpower')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
library(stargazer)
library(kableExtra)
library(finalfit)
library(broom)
#install.packages("rdpower")
library(rdpower)
library(modelsummary)
install.packages('modelsummary')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
library(stargazer)
library(kableExtra)
library(finalfit)
library(broom)
#install.packages("rdpower")
library(rdpower)
library(modelsummary)
#install.packages("ggpubr")
library(ggpubr)
install.packages('ggpubr')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rdrobust)
library(here)
library(stargazer)
library(kableExtra)
library(finalfit)
library(broom)
#install.packages("rdpower")
library(rdpower)
library(modelsummary)
#install.packages("ggpubr")
library(ggpubr)
clean_data <- read.dta("data.dta")
# Generate column for summary statistics
clean_for_summary <-  clean_data %>%
mutate( gender =
case_when(sex == "M" ~ "Male",
sex == "F" ~ "Female"),
birthplace = case_when( bpl_north_america == 1 ~ "North America",
bpl_asia == 1 ~ "Asia",
bpl_other == 1 ~ "Other"),
study_campus = case_when(loc_campus1 == 1 ~ "Campus 1",
loc_campus2 == 1 ~ "Campus 2",
loc_campus3 == 1 ~ "Campus 3"),
first_language = case_when(mtongue == "English" ~ "English",
mtongue == "Other" ~ "Other"),
on_probation_after_1st_year = case_when( probation_year1 == 1 ~ "Yes",
probation_year1 == 0 ~ "No"),
ever_on_probation = case_when( probation_ever == 1 ~ "Yes",
probation_ever == 0 ~ "No"),
left_university_after_1st_evaluation = case_when(left_school == 1 ~ "Yes",
left_school == 0 ~ "No"),
ever_suspended = case_when(suspended_ever == 1 ~ "Yes",
suspended_ever == 0 ~ "No"),
graduated_by_year4 = case_when(gradin4 == 1 ~ "Yes",
gradin4 == 0 ~ "No"),
graduated_by_year5 = case_when(gradin5 == 1 ~ "Yes",
gradin5 == 0 ~ "No"),
graduated_by_year6 = case_when(gradin6 == 1 ~ "Yes",
gradin6 == 0 ~ "No"),
all_students = case_when(all == 1 ~ "All Students" ))
# Summary statistics for categorical variable
categorical1 <- clean_for_summary %>%
summary_factorlist("all_students", c("gender", "birthplace", "study_campus", "first_language", "on_probation_after_1st_year", "ever_on_probation", "left_university_after_1st_evaluation", "ever_suspended", "graduated_by_year4", "graduated_by_year5", "graduated_by_year6"),
p = FALSE,
digits = c(1,1,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
# Summary statistics for continuous variable
continuous1 <- clean_for_summary %>%
#  select(`All Students`, Gender) %>%
summary_factorlist("all_students", c("hsgrade_pct", "totcredits_year1", "age_at_entry","GPA_year1", "dist_from_cut","GPA_year2", "year2_dist_from_cut"),
p = FALSE,
digits = c(2,2,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
# Add rows for visualization using kabel
combine1 <- rbind(categorical1, continuous1)
combine1 <- rbind(combine1, c("Characteristics", "",""))
combine1 <- rbind(combine1, c("Outcomes", "", ""))
combine1 <- rbind(combine1, c("","","Mean (SD)"))
combine1 <- rbind(combine1, c("","","Mean (SD)"))
combine1 <- rbind(combine1, c("","",""))
combine1 <- rbind(combine1, c("","",""))
combine1 <- rbind(combine1, c("","",""))
combine1$` ` <- replace(combine1$` `, combine1$` ` == "Mean (SD)", "")
# Manual Modification For Visualization
combine1$all_students <- NULL
combine1 <- combine1[c(34,1,3,2,5,4,6:11,38,36,27:29,39,34,26,13,12,15,14,17,16,19,18,21,20,23,22,25,24,40,37,30,31,32,33),] %>%
mutate(Description = c("Characteristics","","Gender","","Birth Place", "","","Study Campus","","", "First Language","","","","Highschool Grade Percentile","Credits Attempted in First Year", "Age at Entry","", "Outcomes","","On Probation After 1st Year","","Ever On Probation", "", "Left University After 1st Evaluation", "","Ever Suspended","","Graduated by Year 4","", "Graduated by Year 5","", "Graduated by Year 6","","","","First Year GPA","Distance from Cutoff in 1st Year","Second Year GPA", "Distance from Cutoff in 2nd Year"))
#Filter invalid data caused by university administrative error in data reporting
clean_summary_addcol <- clean_for_summary %>%
filter((dist_from_cut < 0 & probation_year1 ==1)| (dist_from_cut >=0 & probation_year1 ==0)) %>%
mutate( status = case_when(probation_year1 == 0 ~ "In Good Standing",
probation_year1 == 1 ~ "On Academic Probation"))
# Set students on academic probation as the baseline group for better visualization
clean_summary_addcol$status <- as.factor(clean_summary_addcol$status)
clean_summary_addcol$status <- relevel(clean_summary_addcol$status, "On Academic Probation")
# Referenced the following to plot the histogram
# http://www.sthda.com/english/wiki/ggplot2-histogram-plot-quick-start-guide-r-software-and-data-visualization
# Histogram of the distribution of GPA from cutoff
ggplot(clean_summary_addcol, aes(x = hsgrade_pct, color = status, fill = status))+
geom_histogram(aes(y  = ..density..), binwidth = 2.5, position = "identity", alpha = 0.4)+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom", legend.title = element_blank()) +
ylab("Density")+
xlab("Highschool Grade Percentile")+
ggtitle("Distribution of Highschool Grade by Academic Status for All Students")
# Histogram of the distribution of attempted credit in Year 1
ggplot(clean_summary_addcol, aes(x = totcredits_year1, color = status, fill = status))+
geom_histogram(aes(y  = ..density..), binwidth = 0.5, position = "identity", alpha = 0.4)+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom", legend.title = element_blank()) +
ylab("Density")+
xlab("Highschool Grade Percentile")+
ggtitle("Distribution of Attempted Credit in Year 1 by Academic Status for All Students")
# Generate summary table
kable(combine1[,c(3,1,2)],caption = "Summary Statistics of Observable Characteristics and Outcomes of All Students",
booktabs = TRUE, linesep = "") %>%
kable_styling() %>%
add_footnote("For all characteristics and outcomes except graduation rates and distance from cutoff in 2nd year. The entire dataset consists of 44362 students. Graduation rate samples are 30017 for Year 4, 24581 for Year 5, 19757 for Year 6.38576 students have GPA observed in 2nd Year", notation = "number")
# Lindo's bandwidth used in the original paper
cut_data_lin <- clean_for_summary %>%
filter(dist_from_cut >= -0.6, dist_from_cut <= 0.6)
#Filter invalid data caused by university administrative error in data reporting
clean_cut2 <- cut_data_lin %>%
filter((dist_from_cut < 0 & probation_year1 ==1)| (dist_from_cut >=0 & probation_year1 ==0) )
clean_cut2 <- clean_cut2 %>%
mutate( status = case_when(probation_year1 == 0 ~ "In Good Standing",
probation_year1 == 1 ~ "On Academic Probation"))
categorical3 <- clean_cut2 %>%
summary_factorlist("status", c("gender", "birthplace", "study_campus", "first_language"),
p = FALSE,
digits = c(1,1,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
continuous3 <- clean_cut2 %>%
summary_factorlist("status", c("hsgrade_pct", "totcredits_year1", "age_at_entry"),
p = FALSE,
digits = c(2,2,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
combine3 <- rbind(categorical3, continuous3)
combine3 <- rbind(combine3, c("","","", ""))
combine3 <- rbind(combine3, c("","","Mean (SD)", "Mean (SD)"))
combine3 <- combine3[-c(12),]
combine3$` ` <- replace(combine3$` `, combine3$` ` == "Mean (SD)", "")
combine3$status <- NULL
combine3 <- combine3[c(1,3,2,5,4,6:11,15,16,12,13,14),] %>%
mutate(Description = c("","Gender","","Birth Place", "","","Study Campus","","", "First Language","","","","Highschool Grade Percentile","Credits Attempted in First Year", "Age at Entry"))
kable(combine3[,c(4,1,2,3)],caption = "Summary Statistics of Students Within 0.6 GPA of Probation Cutoff",
booktabs = TRUE, linesep = "") %>%
kable_styling(latex_options = "hold_position")
# conduct the t test on highschool grade between treatment and comparison group within 0.6 GPA cutoff score
clean_cut_prob1 <- clean_cut2 %>%
filter(dist_from_cut < 0)
clean_cut_good1 <- clean_cut2 %>%
filter(dist_from_cut >= 0)
t.test(clean_cut_prob1$hsgrade_pct, clean_cut_good1$hsgrade_pct) %>%
tidy() %>%
select(-c(estimate,statistic,parameter, alternative))%>%
mutate_if(is.numeric, format, digits=4)%>%
rename( `On Probation` = estimate1,
`In Good Standing` = estimate2,
`P-value` = p.value,
`95% CI Low` = conf.low,
`95% CI High` = conf.high,
Method = method) %>%
kableExtra::kable(caption="Two Sided T-test on Student Highschool Grade Percentile within 0.6 GPA cutoff", align = "cccccc")%>%
kable_styling(latex_options = "hold_position")
# conduct the t test on credit attempted between treatment and comparison group within 0.6 GPA cutoff score
clean_cut_prob1 <- clean_cut2 %>%
filter(dist_from_cut < 0)
clean_cut_good1 <- clean_cut2 %>%
filter(dist_from_cut >= 0)
t.test(clean_cut_prob1$totcredits_year1, clean_cut_good1$totcredits_year1) %>%
tidy() %>%
select(-c(estimate, statistic,parameter, alternative))%>%
mutate_if(is.numeric, format, digits=4)%>%
rename( `On Probation` = estimate1,
`In Good Standing` = estimate2,
`P-value` = p.value,
`95% CI Low` = conf.low,
`95% CI High` = conf.high,
Method = method) %>%
kable(caption="Two Sided T-test on Student Credits Attempted in Year 1 within 0.6 GPA cutoff",align = "cccccc")%>%
kable_styling(latex_options = "hold_position")
# Grading scheme obtained from the university website
tibble(
"Grade" = list("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "F"),
"Grade Point Value" = list("4.0", "4.0", "3.7", "3.3", "3.0", "2.7", "2.3", "2.0", "1.7", "1.3", "1.0", "0.7", "0.0"),
"Grade Percentage" = list("90-100", "85-89","80-84","77-79", "73-76","70-72","67-69","63-66","60-62","57-59","53-56","50-52","0-49"),
"Definition" = list("Excellent","","","Good","","","Adequate","","","Marginal","","","Inadequate; no credit obtained")
) %>%
kable(caption = "Grading Scheme of the University",
align = "cccc") %>%
kable_styling(latex_options = "hold_position")
cut_data <- clean_for_summary %>%
filter(dist_from_cut >= -0.2, dist_from_cut <= 0.2)
#Filter invalid data caused by university administrative error in data reporting
clean_cut <- cut_data %>%
filter((dist_from_cut < 0 & probation_year1 ==1)| (dist_from_cut >=0 & probation_year1 ==0) )
clean_cut <- clean_cut %>%
mutate( status = case_when(probation_year1 == 0 ~ "In Good Standing",
probation_year1 == 1 ~ "On Academic Probation"))
categorical2 <- clean_cut %>%
summary_factorlist("status", c("gender", "birthplace", "study_campus", "first_language"),
p = FALSE,
digits = c(1,1,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
continuous2 <- clean_cut %>%
summary_factorlist("status", c("hsgrade_pct", "totcredits_year1", "age_at_entry"),
p = FALSE,
digits = c(2,2,3,1),
add_dependent_label = TRUE,
dependent_label_prefix = "",
add_col_totals = TRUE,
include_row_missing_col = FALSE,
col_totals_rowname = "",
col_totals_prefix = "N(%) = ")
combine2 <- rbind(categorical2, continuous2)
combine2 <- rbind(combine2, c("","","", ""))
combine2 <- rbind(combine2, c("","","Mean (SD)", "Mean (SD)"))
combine2 <- combine2[-c(12),]
combine2$` ` <- replace(combine2$` `, combine2$` ` == "Mean (SD)", "")
combine2$status <- NULL
combine2 <- combine2[c(1,3,2,5,4,6:11,15,16,12,13,14),] %>%
mutate(Description = c("","Gender","","Birth Place", "","","Study Campus","","", "First Language","","","","Highschool Grade Percentile","Credits Attempted in First Year", "Age at Entry"))
kable(combine2[,c(4,1,2,3)],caption = "Summary Statistics of Students Within 0.2 GPA of Probation Cutoff",
booktabs = TRUE, linesep = "") %>%
kable_styling(latex_options = "hold_position")
# Set students on academic probation as the baseline group for easier visualizations
clean_cut$status <- as.factor(clean_cut$status)
clean_cut$status <- relevel(clean_cut$status, "On Academic Probation")
clean_cut2$status <- as.factor(clean_cut2$status)
clean_cut2$status <- relevel(clean_cut2$status, "On Academic Probation")
# Distribution of Highschool Grades within 0.6 GPA bandwidth
hs_06 <- ggplot(clean_cut2, aes(x = hsgrade_pct, color = status, fill = status))+
geom_histogram(aes(y  = ..density..), binwidth = 2.5, position = "identity", alpha = 0.4)+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom", legend.title = element_blank()) +
ylab("Density")+
xlab("Highschool Grade Percentile")+
ggtitle("Within 0.6 GPA Bandwidth")
# Distribution of Highschool Grades within 0.2 GPA bandwidth
hs_02 <- ggplot(clean_cut, aes(x = hsgrade_pct, color = status, fill = status))+
geom_histogram(aes(y  = ..density..), binwidth = 2.5, position = "identity", alpha = 0.4)+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom", legend.title = element_blank()) +
ylab("Density")+
xlab("Highschool Grade Percentile")+
ggtitle("Within 0.2 GPA Bandwidth")
# Referenced the following  http://www.sthda.com/english/articles/32-r-graphics-essentials/126-combine-multiple-ggplots-in-one-graph/
# combine figure into 1
ggarrange(hs_06,hs_02, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom")
# conduct the t test on highschool grade between treatment and comparison group within 0.2 GPA cutoff score
clean_cut_prob <- clean_cut %>%
filter(dist_from_cut < 0)
clean_cut_good <- clean_cut %>%
filter(dist_from_cut >= 0)
t.test(clean_cut_prob$hsgrade_pct, clean_cut_good$hsgrade_pct) %>%
tidy() %>%
select(-c(estimate,statistic,parameter, alternative))%>%
mutate_if(is.numeric, format, digits=4)%>%
rename( `On Probation` = estimate1,
`In Good Standing` = estimate2,
`P-value` = p.value,
`95% CI Low` = conf.low,
`95% CI High` = conf.high,
Method = method) %>%
kableExtra::kable(caption="Two Sided T-test on Student Highschool Grade Percentile within 0.2 GPA cutoff", align = "cccccc")%>%
kable_styling(latex_options = "hold_position")
# conduct the t test on credit attempted between treatment and comparison group within 0.2 GPA cutoff score
clean_cut_prob <- clean_cut %>%
filter(dist_from_cut < 0)
clean_cut_good <- clean_cut %>%
filter(dist_from_cut >= 0)
t.test(clean_cut_prob$totcredits_year1, clean_cut_good$totcredits_year1) %>%
tidy() %>%
select(-c(estimate, statistic,parameter, alternative))%>%
mutate_if(is.numeric, format, digits=4)%>%
rename( `On Probation` = estimate1,
`In Good Standing` = estimate2,
`P-value` = p.value,
`95% CI Low` = conf.low,
`95% CI High` = conf.high,
Method = method) %>%
kable(caption="Two Sided T-test on Student Credits Attempted in Year 1 within 0.2 GPA cutoff",align = "cccccc")%>%
kable_styling(latex_options = "hold_position")
# Calculate sample size required to raise sufficient power to estimate the probation effect on leaving school
# Referenced https://rdrr.io/cran/rdpower/man/rdpower-package.html to use the rdsampsi function
power_data <- clean_for_summary
Y1 <- power_data$left_school
R <- power_data$dist_from_cut
Z1 <- power_data[c("left_school", "dist_from_cut")]
#test_power <- rdpower(data = Z)
left_sample <- rdsampsi(data = Z1, cutoff = 0)
# Calculate sample size required to raise sufficient power to estimate the probation effect on second year GPA
Y2 <- power_data$GPA_year2
R <- power_data$dist_from_cut
Z2 <- power_data[c("GPA_year2", "dist_from_cut")]
#test_power <- rdpower(data = Z)
GPA_sample <- rdsampsi(data = Z2, cutoff = 0)
# Calculate sample size required to raise sufficient power to estimate the probation effect on graduation by year 4
Y3 <- power_data$gradin4
R <- power_data$dist_from_cut
Z3 <- power_data[c("gradin4", "dist_from_cut")]
#test_power <- rdpower(data = Z)
grad4_sample <- rdsampsi(data = Z3, cutoff = 0)
tibble(
Interest = list("Dropout", "GPA in Year 2", "Graduation by Year 4"),
`Total Student` = list(left_sample$sampsi.h.tot,GPA_sample$sampsi.h.tot,grad4_sample$sampsi.h.tot),
`On Probation` = list(left_sample$sampsi.h.r, GPA_sample$sampsi.h.r, grad4_sample$sampsi.h.r),
`In Goodstanding` = list(left_sample$sampsi.h.l, GPA_sample$sampsi.h.l, grad4_sample$sampsi.h.l)
) %>%
kable(caption = "Sample Required to Raise Sufficient Power", align = "cccc") %>%
kable_styling(latex_options = "hold_position") %>%
add_footnote("The significance level is 0.05 and desired power is 0.8.", notation = "number")
# Histogram of the distribution of GPA from cutoff
ggplot(clean_for_summary, aes(x = dist_from_cut))+
geom_histogram(aes(y  = stat(count)), binwidth = 0.125, color = "black", fill = "#33CCCC", alpha = 0.8)+
geom_vline(xintercept = 0, linetype = "dotted")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5)) +
ylab("Frequency Headcount")+
xlab("Year 1 GPA minus Probation Cutoff")+
ggtitle("Distribution of Year 1 GPA relative to Probation Cutoff for All Students")
# Check if the RDD is "sharp" or "fuzzy"
# Skip this graph (a little redundant)
ggplot(clean_cut,aes(x = dist_from_cut, y = status, group = status, color = status))+
geom_point(alpha = 0.05)+
geom_smooth(method = "lm")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))+
labs( title = "Stuent Academic Status",
y ="Academic Status",
x = "Year 1 GPA minus Probation Cutoff")
# import data
clean_cut <- read.csv(here("inputs/data/bandwidth02.csv"))
class(clean_cut$status)
clean_cut$status <- as.factor(clean_cut$status)
levels(clean_cut$status)
# Set students on academic probation as the baseline group
clean_cut$status <- relevel(clean_cut$status, "On Academic Probation")
clean_cut2$status <- as.factor(clean_cut2$status)
clean_cut2$status <- relevel(clean_cut2$status, "On Academic Probation")
clean_cut3$status <- as.factor(clean_cut3$status)
class(clean_cut$status)
clean_cut$status <- as.factor(clean_cut$status)
levels(clean_cut$status)
# Set students on academic probation as the baseline group
clean_cut$status <- relevel(clean_cut$status, "On Academic Probation")
clean_cut2$status <- as.factor(clean_cut2$status)
clean_cut2$status <- relevel(clean_cut2$status, "On Academic Probation")
#clean_cut3$status <- as.factor(clean_cut3$status)
#clean_cut3$status <- relevel(clean_cut3$status, "On Academic Probation")
# Logistic Regression to estimate the impact of probation on student dropout
# Bandwidth 0.2
dropout_02 <- glm(left_school ~ status + dist_from_cut + gender + highHS + first_language ,family = "binomial", data = clean_cut)
#summary(dropout_02)
# Bandwidth 0.3
dropout_03 <- glm(left_school ~ status + dist_from_cut + gender + highHS + first_language ,family = "binomial", data = clean_cut3)
# Logistic Regression to estimate the impact of probation on student dropout
# Bandwidth 0.2
dropout_02 <- glm(left_school ~ status + dist_from_cut + gender + highHS + first_language ,family = "binomial", data = clean_cut)
#summary(dropout_02)
# Bandwidth 0.3
#dropout_03 <- glm(left_school ~ status + dist_from_cut + gender + highHS + first_language ,family = "binomial", data = clean_cut3)
# Bandwidth 0.6
dropout_06 <- glm(left_school ~ status + dist_from_cut + gender + highHS + first_language ,family = "binomial", data = clean_cut2)
# Reference the following to customize modelsummary table: https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html
# Note: Broom package could not exponentiate the standard error right now
# Reference: https://github.com/tidymodels/broom/issues/422
modelsummary(list("0.2 GPA Bandwidth" = dropout_02, "0.3 GPA Bandwidth" = dropout_03,"0.6 GPA Bandwidth" =  dropout_06),
statistic = "{std.error} ({p.value})",
stars =TRUE,
coef_map = c("(Intercept)" = "Constant", "statusIn Good Standing" = "In Good Standing", "dist_from_cut" = "f(Cutoff Distance)","genderMale" = "Gender Male", "highHS" = "Highschool Above Average", "first_languageOther" = "First Language Not English "),
exponentiate = TRUE,
title = "Logistic Regression for the Impact of Academic Probation on Student Dropout",
gof_omit = "BIC") %>%
add_footnote("Odds Ratio in First Row. Standard Error of Log of Odds in Second Row. P-value in Parentheses", notation = "number") %>%
kable_styling(latex_options = "hold_position")
# Reference the following to customize modelsummary table: https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html
# Note: Broom package could not exponentiate the standard error right now
# Reference: https://github.com/tidymodels/broom/issues/422
#modelsummary(list("0.2 GPA Bandwidth" = dropout_02, "0.3 GPA Bandwidth" = dropout_03,"0.6 GPA Bandwidth" =  dropout_06),
statistic = "{std.error} ({p.value})",
ggplot(data= clean_cut, aes(x = dist_from_cut, y = left_school, color = status))+
geom_point(alpha = 0.05)+
geom_smooth(method = "glm", method.args = list(family = 'binomial'))+
theme_light()+
geom_vline(xintercept = 0, linetype = "dotted")+
theme(legend.title = element_blank(), legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
guides(color=guide_legend(override.aes=list(fill=NA)))+
labs(title = "Academic Probation Impact on Dropout",
x = "Year 1 GPA minus Probation Cutoff",
y = "Left University")
# Linear Regression to estimate the impact of probation on student Year 2 GPA
# Bandwidth 0.2
gpa_02 <- lm(GPA_year2 ~ status + dist_from_cut + gender + highHS + first_language, data = clean_cut)
#summary(gpa_02)
# Bandwidth 0.3
gpa_03 <- lm(GPA_year2 ~ status + dist_from_cut + gender + highHS + first_language, data = clean_cut3)
plot_model = lm(gradin6 ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(gradin6 ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(nextGPA ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(nextGPA ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(leftschool ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot_model = lm(left_school ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(nextGPA ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot(plot_model)
plot_model = lm(left_school ~ gpalscutoff + gpaXgpalscutoff + gpaXgpagrcutoff + gpasqXgpagrcutoff, data = data1)
plot(plot_model)
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
data_main <- read.dta("data.dta")
data1 <- data_main[data_main$dist_from_cut > -1.4 & data_main$dist_from_cut < 1.4, ]
data1 <- data_main[data_main$dist_from_cut > -1.4 & data_main$dist_from_cut < 1.4, ]
data1 <- data_main[data_main$dist_from_cut > -1.4 & data_main$dist_from_cut < 1.4, ]
data_check <- subset(data1, left_school == 0)
